{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOP2NHJLKxrOh4ov/zUE2lC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mnR123zz/Hello-world/blob/main/Python%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90%E3%80%80\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "em5FYRUt_Mtr",
        "outputId": "5a8b6129-f31c-459f-c6ed-44e6c713cfc1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Successfully installed Japanize-matplotlib-1.1.3\n"
          ]
        }
      ],
      "source": [
        "#matplotlibの日本語化\n",
        "!pip install Japanize-matplotlib | tail -n 1\n",
        "\n",
        "#可視化で使うimport文\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import japanize_matplotlib\n",
        "from IPython.display import display\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = 'https://raw.githubusercontent.com/makaishi2/samples/main/data/titanic-v2.csv'\n",
        "!wget $url\n",
        "csv_fn = 'titanic-v2.csv'\n",
        "!head -3 $csv_fn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DYaQVYe9BFoB",
        "outputId": "ed6062eb-4b99-4e64-bf66-3b9389c11e55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2025-01-23 02:55:52--  https://raw.githubusercontent.com/makaishi2/samples/main/data/titanic-v2.csv\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 109153 (107K) [text/plain]\n",
            "Saving to: ‘titanic-v2.csv’\n",
            "\n",
            "titanic-v2.csv      100%[===================>] 106.59K  --.-KB/s    in 0.03s   \n",
            "\n",
            "2025-01-23 02:55:52 (3.15 MB/s) - ‘titanic-v2.csv’ saved [109153/109153]\n",
            "\n",
            "pclass,survived,name,sex,age,sibsp,parch,ticket,fare,cabin,embarked,boat,body,home.dest\n",
            "1,1,'Allen, Miss. Elisabeth Walton',female,29,0,0,24160,211.3375,B5,S,2,?,'St Louis, MO'\n",
            "1,1,'Allison, Master. Hudson Trevor',male,0.9167,1,2,113781,151.55,'C22 C26',S,11,?,'Montreal, PQ / Chesterville, ON'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\n",
        "    csv_fn,\n",
        "    na_values = '?',\n",
        "    quotechar = \"'\",\n",
        "    )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "XQrridMLCiwK",
        "outputId": "85150ac7-135b-46e0-fe32-7e09fd82409f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ParserError",
          "evalue": "Error tokenizing data. C error: Expected 14 fields in line 130, saw 15\n",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mParserError\u001b[0m                               Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-5a34b5c24965>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m df = pd.read_csv(\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mcsv_fn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mna_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'?'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mquotechar\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"'\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    624\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    625\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 626\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnrows\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    627\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    628\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, nrows)\u001b[0m\n\u001b[1;32m   1921\u001b[0m                     \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1922\u001b[0m                     \u001b[0mcol_dict\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1923\u001b[0;31m                 \u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m  \u001b[0;31m# type: ignore[attr-defined]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1924\u001b[0m                     \u001b[0mnrows\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1925\u001b[0m                 )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, nrows)\u001b[0m\n\u001b[1;32m    232\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    233\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlow_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 234\u001b[0;31m                 \u001b[0mchunks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_low_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnrows\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    235\u001b[0m                 \u001b[0;31m# destructive to chunks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_concatenate_chunks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchunks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.read_low_memory\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._read_rows\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._tokenize_rows\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._check_tokenize_status\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.raise_parser_error\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mParserError\u001b[0m: Error tokenizing data. C error: Expected 14 fields in line 130, saw 15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!head -130 $csv_fn | tail -1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d86huUb0EPwU",
        "outputId": "f56b12b9-ab47-4e9a-f87e-ea6648104058"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1,0,'Gee, Mr. Arthur H',male,47,0,0,111320,38.5,E63,S,?,275,'St Anne\\'s-on-Sea, Lancashire'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\n",
        "    csv_fn,\n",
        "    na_values = '?',\n",
        "    quotechar = \"'\",\n",
        "    escapechar = '\\\\'\n",
        "                 )\n",
        "display(df.head(1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "id": "K9d40j7bFlT2",
        "outputId": "ed29fa1d-4434-4ddf-d17b-157c15356053"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   pclass  survived                           name     sex   age  sibsp  \\\n",
              "0       1         1  Allen, Miss. Elisabeth Walton  female  29.0      0   \n",
              "\n",
              "   parch ticket      fare cabin embarked boat  body     home.dest  \n",
              "0      0  24160  211.3375    B5        S    2   NaN  St Louis, MO  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-00982b5d-a4dd-4494-9318-f5094673155b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pclass</th>\n",
              "      <th>survived</th>\n",
              "      <th>name</th>\n",
              "      <th>sex</th>\n",
              "      <th>age</th>\n",
              "      <th>sibsp</th>\n",
              "      <th>parch</th>\n",
              "      <th>ticket</th>\n",
              "      <th>fare</th>\n",
              "      <th>cabin</th>\n",
              "      <th>embarked</th>\n",
              "      <th>boat</th>\n",
              "      <th>body</th>\n",
              "      <th>home.dest</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Allen, Miss. Elisabeth Walton</td>\n",
              "      <td>female</td>\n",
              "      <td>29.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24160</td>\n",
              "      <td>211.3375</td>\n",
              "      <td>B5</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>St Louis, MO</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00982b5d-a4dd-4494-9318-f5094673155b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-00982b5d-a4dd-4494-9318-f5094673155b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-00982b5d-a4dd-4494-9318-f5094673155b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Allen, Miss. Elisabeth Walton\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 29.0,\n        \"max\": 29.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"24160\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 211.3375,\n        \"max\": 211.3375,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          211.3375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"B5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"boat\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"body\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"home.dest\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "lwrwPocHHIGH",
        "outputId": "a3f43514-bad9-48d9-cc53-9de2cadd8f56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pclass         int64\n",
              "survived       int64\n",
              "name          object\n",
              "sex           object\n",
              "age          float64\n",
              "sibsp          int64\n",
              "parch          int64\n",
              "ticket        object\n",
              "fare         float64\n",
              "cabin         object\n",
              "embarked      object\n",
              "boat          object\n",
              "body         float64\n",
              "home.dest     object\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>pclass</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>survived</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sex</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sibsp</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>parch</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ticket</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fare</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cabin</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>embarked</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>boat</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>body</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>home.dest</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[['body']].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "_2iQvJd2HLmu",
        "outputId": "a5b0fc64-db2a-407c-99ec-cadee383ba3a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    body\n",
              "0    NaN\n",
              "1    NaN\n",
              "2    NaN\n",
              "3  135.0\n",
              "4    NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-030798b3-fb42-462e-914d-3eec8575e423\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>body</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>135.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-030798b3-fb42-462e-914d-3eec8575e423')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-030798b3-fb42-462e-914d-3eec8575e423 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-030798b3-fb42-462e-914d-3eec8575e423');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-09c257a6-9ff2-4238-9dd1-3e324d6eb3be\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-09c257a6-9ff2-4238-9dd1-3e324d6eb3be')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-09c257a6-9ff2-4238-9dd1-3e324d6eb3be button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[['body']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"body\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 135.0,\n        \"max\": 135.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          135.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\n",
        "    csv_fn,\n",
        "    na_values = '?',\n",
        "    quotechar = \"'\",\n",
        "    escapechar = '\\\\',\n",
        "    dtype = {'body':object} )\n",
        "print(df.dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U-GCETw9HQsQ",
        "outputId": "9cdc8de9-6730-4df0-c760-1e90ef20965a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pclass         int64\n",
            "survived       int64\n",
            "name          object\n",
            "sex           object\n",
            "age          float64\n",
            "sibsp          int64\n",
            "parch          int64\n",
            "ticket        object\n",
            "fare         float64\n",
            "cabin         object\n",
            "embarked      object\n",
            "boat          object\n",
            "body          object\n",
            "home.dest     object\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "display(df[['body']].head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ITuWRX2uIATx",
        "outputId": "ffb07568-0a91-4ac0-9b62-b80c7d6fe1bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  body\n",
              "0  NaN\n",
              "1  NaN\n",
              "2  NaN\n",
              "3  135\n",
              "4  NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1f29137b-ae44-4a60-9b70-ee03785ee6e9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>body</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f29137b-ae44-4a60-9b70-ee03785ee6e9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1f29137b-ae44-4a60-9b70-ee03785ee6e9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1f29137b-ae44-4a60-9b70-ee03785ee6e9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a5e42808-8699-4fd3-8336-cf4679d532ac\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5e42808-8699-4fd3-8336-cf4679d532ac')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a5e42808-8699-4fd3-8336-cf4679d532ac button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df[['body']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"body\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"135\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "columns = [\n",
        "    '客室クラス','生存状況','氏名','性別',\n",
        "    '年齢','兄弟_配偶者数','親_子供数',\n",
        "    '乗船券番号','運賃','客室番号','乗船港',\n",
        "    '救命ボート番号','遺体識別番号','自宅または目的地'\n",
        "]\n",
        "df.columns = columns\n",
        "display(df.head(1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 167
        },
        "id": "IRw6u1X8IioG",
        "outputId": "7ec71ff3-7f7b-4e0c-9414-faee2b7cdb56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   客室クラス  生存状況                             氏名      性別    年齢  兄弟_配偶者数  親_子供数  \\\n",
              "0      1     1  Allen, Miss. Elisabeth Walton  female  29.0        0      0   \n",
              "\n",
              "   乗船券番号        運賃 客室番号 乗船港 救命ボート番号 遺体識別番号      自宅または目的地  \n",
              "0  24160  211.3375   B5   S       2    NaN  St Louis, MO  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-78e177f8-a451-47ef-b56c-9794e600c6f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>客室クラス</th>\n",
              "      <th>生存状況</th>\n",
              "      <th>氏名</th>\n",
              "      <th>性別</th>\n",
              "      <th>年齢</th>\n",
              "      <th>兄弟_配偶者数</th>\n",
              "      <th>親_子供数</th>\n",
              "      <th>乗船券番号</th>\n",
              "      <th>運賃</th>\n",
              "      <th>客室番号</th>\n",
              "      <th>乗船港</th>\n",
              "      <th>救命ボート番号</th>\n",
              "      <th>遺体識別番号</th>\n",
              "      <th>自宅または目的地</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Allen, Miss. Elisabeth Walton</td>\n",
              "      <td>female</td>\n",
              "      <td>29.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24160</td>\n",
              "      <td>211.3375</td>\n",
              "      <td>B5</td>\n",
              "      <td>S</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>St Louis, MO</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78e177f8-a451-47ef-b56c-9794e600c6f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-78e177f8-a451-47ef-b56c-9794e600c6f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-78e177f8-a451-47ef-b56c-9794e600c6f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H4rZ5Cl2JwFi",
        "outputId": "b48083f6-79f7-4993-c969-d95eac23ee92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "客室クラス          0\n",
            "生存状況           0\n",
            "氏名             0\n",
            "性別             0\n",
            "年齢           263\n",
            "兄弟_配偶者数        0\n",
            "親_子供数          0\n",
            "乗船券番号          0\n",
            "運賃             1\n",
            "客室番号        1014\n",
            "乗船港            2\n",
            "救命ボート番号      823\n",
            "遺体識別番号      1188\n",
            "自宅または目的地     564\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "bb6TO8FwKOCE",
        "outputId": "f0f4cb47-dc2a-4f59-c4d6-d09d22fb97ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             客室クラス         生存状況           年齢      兄弟_配偶者数        親_子供数  \\\n",
              "count  1309.000000  1309.000000  1046.000000  1309.000000  1309.000000   \n",
              "mean      2.294882     0.381971    29.881135     0.498854     0.385027   \n",
              "std       0.837836     0.486055    14.413500     1.041658     0.865560   \n",
              "min       1.000000     0.000000     0.166700     0.000000     0.000000   \n",
              "25%       2.000000     0.000000    21.000000     0.000000     0.000000   \n",
              "50%       3.000000     0.000000    28.000000     0.000000     0.000000   \n",
              "75%       3.000000     1.000000    39.000000     1.000000     0.000000   \n",
              "max       3.000000     1.000000    80.000000     8.000000     9.000000   \n",
              "\n",
              "                運賃  \n",
              "count  1308.000000  \n",
              "mean     33.295479  \n",
              "std      51.758668  \n",
              "min       0.000000  \n",
              "25%       7.895800  \n",
              "50%      14.454200  \n",
              "75%      31.275000  \n",
              "max     512.329200  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2f004ec1-96c5-4493-9453-c21a49ff6e6e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>客室クラス</th>\n",
              "      <th>生存状況</th>\n",
              "      <th>年齢</th>\n",
              "      <th>兄弟_配偶者数</th>\n",
              "      <th>親_子供数</th>\n",
              "      <th>運賃</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1309.000000</td>\n",
              "      <td>1309.000000</td>\n",
              "      <td>1046.000000</td>\n",
              "      <td>1309.000000</td>\n",
              "      <td>1309.000000</td>\n",
              "      <td>1308.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.294882</td>\n",
              "      <td>0.381971</td>\n",
              "      <td>29.881135</td>\n",
              "      <td>0.498854</td>\n",
              "      <td>0.385027</td>\n",
              "      <td>33.295479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.837836</td>\n",
              "      <td>0.486055</td>\n",
              "      <td>14.413500</td>\n",
              "      <td>1.041658</td>\n",
              "      <td>0.865560</td>\n",
              "      <td>51.758668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.166700</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.895800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>39.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.275000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f004ec1-96c5-4493-9453-c21a49ff6e6e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2f004ec1-96c5-4493-9453-c21a49ff6e6e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2f004ec1-96c5-4493-9453-c21a49ff6e6e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0e8f715d-d714-4909-b944-33e2ee81b3dd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e8f715d-d714-4909-b944-33e2ee81b3dd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0e8f715d-d714-4909-b944-33e2ee81b3dd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"\\u5ba2\\u5ba4\\u30af\\u30e9\\u30b9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 462.03788291201505,\n        \"min\": 0.837836018970131,\n        \"max\": 1309.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1309.0,\n          2.294881588999236,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u751f\\u5b58\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 462.6567174482674,\n        \"min\": 0.0,\n        \"max\": 1309.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3819709702062643,\n          1.0,\n          0.48605517086648004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 359.84064781685913,\n        \"min\": 0.1667,\n        \"max\": 1046.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.8811345124283,\n          28.0,\n          1046.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5144\\u5f1f_\\u914d\\u5076\\u8005\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 462.27680922007715,\n        \"min\": 0.0,\n        \"max\": 1309.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1309.0,\n          0.4988540870893812,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u89aa_\\u5b50\\u4f9b\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 462.29399018424664,\n        \"min\": 0.0,\n        \"max\": 1309.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3850267379679144,\n          9.0,\n          0.8655602753495126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u904b\\u8cc3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 462.70446257758823,\n        \"min\": 0.0,\n        \"max\": 1308.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          33.29547928134557,\n          14.4542,\n          1308.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe(include=['O'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "55lL9JB6LvoE",
        "outputId": "ad54fad4-8c0f-4176-f85e-04db289b11bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          氏名    性別     乗船券番号         客室番号   乗船港 救命ボート番号  \\\n",
              "count                   1309  1309      1309          295  1307     486   \n",
              "unique                  1307     2       929          186     3      27   \n",
              "top     Connolly, Miss. Kate  male  CA. 2343  C23 C25 C27     S      13   \n",
              "freq                       2   843        11            6   914      39   \n",
              "\n",
              "       遺体識別番号      自宅または目的地  \n",
              "count     121           745  \n",
              "unique    121           369  \n",
              "top       135  New York, NY  \n",
              "freq        1            64  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3734eb7b-4ec4-4c00-a6ab-f204edf7c489\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>氏名</th>\n",
              "      <th>性別</th>\n",
              "      <th>乗船券番号</th>\n",
              "      <th>客室番号</th>\n",
              "      <th>乗船港</th>\n",
              "      <th>救命ボート番号</th>\n",
              "      <th>遺体識別番号</th>\n",
              "      <th>自宅または目的地</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1309</td>\n",
              "      <td>1309</td>\n",
              "      <td>1309</td>\n",
              "      <td>295</td>\n",
              "      <td>1307</td>\n",
              "      <td>486</td>\n",
              "      <td>121</td>\n",
              "      <td>745</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>1307</td>\n",
              "      <td>2</td>\n",
              "      <td>929</td>\n",
              "      <td>186</td>\n",
              "      <td>3</td>\n",
              "      <td>27</td>\n",
              "      <td>121</td>\n",
              "      <td>369</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Connolly, Miss. Kate</td>\n",
              "      <td>male</td>\n",
              "      <td>CA. 2343</td>\n",
              "      <td>C23 C25 C27</td>\n",
              "      <td>S</td>\n",
              "      <td>13</td>\n",
              "      <td>135</td>\n",
              "      <td>New York, NY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>2</td>\n",
              "      <td>843</td>\n",
              "      <td>11</td>\n",
              "      <td>6</td>\n",
              "      <td>914</td>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3734eb7b-4ec4-4c00-a6ab-f204edf7c489')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3734eb7b-4ec4-4c00-a6ab-f204edf7c489 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3734eb7b-4ec4-4c00-a6ab-f204edf7c489');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aa459f9c-d066-4471-a9d8-f8b8a6f9b1e3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aa459f9c-d066-4471-a9d8-f8b8a6f9b1e3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aa459f9c-d066-4471-a9d8-f8b8a6f9b1e3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"\\u6c0f\\u540d\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1307,\n          \"2\",\n          \"1309\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"843\",\n          \"1309\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4e57\\u8239\\u5238\\u756a\\u53f7\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          929,\n          \"11\",\n          \"1309\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5ba2\\u5ba4\\u756a\\u53f7\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          186,\n          \"6\",\n          \"295\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4e57\\u8239\\u6e2f\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"914\",\n          \"1307\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6551\\u547d\\u30dc\\u30fc\\u30c8\\u756a\\u53f7\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          27,\n          \"39\",\n          \"486\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u907a\\u4f53\\u8b58\\u5225\\u756a\\u53f7\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"121\",\n          \"135\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u81ea\\u5b85\\u307e\\u305f\\u306f\\u76ee\\u7684\\u5730\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          369,\n          \"64\",\n          \"745\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2 = df[['客室クラス','生存状況','性別','乗船港']]\n",
        "for c in list(df2.columns):\n",
        "  print(c)\n",
        "  print(df2[c].value_counts())\n",
        "  print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CpUqRhcx1NxF",
        "outputId": "e31977a8-d9d7-4e79-ce6d-49b4694badfc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "客室クラス\n",
            "客室クラス\n",
            "3    709\n",
            "1    323\n",
            "2    277\n",
            "Name: count, dtype: int64\n",
            "\n",
            "生存状況\n",
            "生存状況\n",
            "0    809\n",
            "1    500\n",
            "Name: count, dtype: int64\n",
            "\n",
            "性別\n",
            "性別\n",
            "male      843\n",
            "female    466\n",
            "Name: count, dtype: int64\n",
            "\n",
            "乗船港\n",
            "乗船港\n",
            "S    914\n",
            "C    270\n",
            "Q    123\n",
            "Name: count, dtype: int64\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby('客室クラス').mean(numeric_only=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "fu_tZFwY6pNX",
        "outputId": "60c62a23-ac66-428f-c0ce-98f8ce60ffb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           生存状況         年齢   兄弟_配偶者数     親_子供数         運賃\n",
              "客室クラス                                                    \n",
              "1      0.619195  39.159918  0.436533  0.365325  87.508992\n",
              "2      0.429603  29.506705  0.393502  0.368231  21.179196\n",
              "3      0.255289  24.816367  0.568406  0.400564  13.302889"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2984e534-2842-4694-b214-3f0b2ebdbc78\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>生存状況</th>\n",
              "      <th>年齢</th>\n",
              "      <th>兄弟_配偶者数</th>\n",
              "      <th>親_子供数</th>\n",
              "      <th>運賃</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>客室クラス</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.619195</td>\n",
              "      <td>39.159918</td>\n",
              "      <td>0.436533</td>\n",
              "      <td>0.365325</td>\n",
              "      <td>87.508992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.429603</td>\n",
              "      <td>29.506705</td>\n",
              "      <td>0.393502</td>\n",
              "      <td>0.368231</td>\n",
              "      <td>21.179196</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.255289</td>\n",
              "      <td>24.816367</td>\n",
              "      <td>0.568406</td>\n",
              "      <td>0.400564</td>\n",
              "      <td>13.302889</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2984e534-2842-4694-b214-3f0b2ebdbc78')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2984e534-2842-4694-b214-3f0b2ebdbc78 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2984e534-2842-4694-b214-3f0b2ebdbc78');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-726516af-9e0d-40e4-8191-20a43db36729\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-726516af-9e0d-40e4-8191-20a43db36729')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-726516af-9e0d-40e4-8191-20a43db36729 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"\\u5ba2\\u5ba4\\u30af\\u30e9\\u30b9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u751f\\u5b58\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18200640026170778,\n        \"min\": 0.2552891396332863,\n        \"max\": 0.6191950464396285,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.6191950464396285,\n          0.4296028880866426,\n          0.2552891396332863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.313471988092134,\n        \"min\": 24.81636726546906,\n        \"max\": 39.15991795774648,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          39.15991795774648,\n          29.506704980842912,\n          24.81636726546906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5144\\u5f1f_\\u914d\\u5076\\u8005\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0911353051693962,\n        \"min\": 0.3935018050541516,\n        \"max\": 0.5684062059238364,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.43653250773993807,\n          0.3935018050541516,\n          0.5684062059238364\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u89aa_\\u5b50\\u4f9b\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.019560461033383353,\n        \"min\": 0.3653250773993808,\n        \"max\": 0.4005641748942172,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.3653250773993808,\n          0.36823104693140796,\n          0.4005641748942172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u904b\\u8cc3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.75991428360287,\n        \"min\": 13.302888700564973,\n        \"max\": 87.50899164086687,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          87.50899164086687,\n          21.179196389891697,\n          13.302888700564973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_crosstab = pd.crosstab(\n",
        "    index=df['客室クラス'],\n",
        "    columns=df['乗船港'],\n",
        "    margins=True)\n",
        "display(df_crosstab)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "CrvKQAb47422",
        "outputId": "13d77bba-3f7f-4724-875e-71408fcfa54b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "乗船港      C    Q    S   All\n",
              "客室クラス                     \n",
              "1      141    3  177   321\n",
              "2       28    7  242   277\n",
              "3      101  113  495   709\n",
              "All    270  123  914  1307"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d9f5b5b6-f13a-4d63-a8c8-516f1c0389fe\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>乗船港</th>\n",
              "      <th>C</th>\n",
              "      <th>Q</th>\n",
              "      <th>S</th>\n",
              "      <th>All</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>客室クラス</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>141</td>\n",
              "      <td>3</td>\n",
              "      <td>177</td>\n",
              "      <td>321</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>7</td>\n",
              "      <td>242</td>\n",
              "      <td>277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>101</td>\n",
              "      <td>113</td>\n",
              "      <td>495</td>\n",
              "      <td>709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All</th>\n",
              "      <td>270</td>\n",
              "      <td>123</td>\n",
              "      <td>914</td>\n",
              "      <td>1307</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d9f5b5b6-f13a-4d63-a8c8-516f1c0389fe')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d9f5b5b6-f13a-4d63-a8c8-516f1c0389fe button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d9f5b5b6-f13a-4d63-a8c8-516f1c0389fe');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5acdbad0-3778-4309-bb6f-8265b36c4edf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5acdbad0-3778-4309-bb6f-8265b36c4edf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5acdbad0-3778-4309-bb6f-8265b36c4edf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2405bfb0-2983-411c-889f-6de09682bc14\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_crosstab')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2405bfb0-2983-411c-889f-6de09682bc14 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_crosstab');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_crosstab",
              "summary": "{\n  \"name\": \"df_crosstab\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"\\u5ba2\\u5ba4\\u30af\\u30e9\\u30b9\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"All\",\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 101,\n        \"min\": 28,\n        \"max\": 270,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          28,\n          270,\n          141\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65,\n        \"min\": 3,\n        \"max\": 123,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          123,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 334,\n        \"min\": 177,\n        \"max\": 914,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          242,\n          914,\n          177\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"All\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 476,\n        \"min\": 277,\n        \"max\": 1307,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          277,\n          1307,\n          321\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pivot = df.pivot_table(\n",
        "    index='性別',columns='客室クラス',\n",
        "    values='生存状況',aggfunc='mean'\n",
        ")\n",
        "display(df_pivot)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "1zk-k3MnAKUn",
        "outputId": "220d3747-10c5-4f44-d87c-8197c645130a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "客室クラス          1         2         3\n",
              "性別                                  \n",
              "female  0.965278  0.886792  0.490741\n",
              "male    0.340782  0.146199  0.152130"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-21361ca5-5893-43fd-b155-145d4c43c391\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>客室クラス</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>性別</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>0.965278</td>\n",
              "      <td>0.886792</td>\n",
              "      <td>0.490741</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>0.340782</td>\n",
              "      <td>0.146199</td>\n",
              "      <td>0.152130</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21361ca5-5893-43fd-b155-145d4c43c391')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-21361ca5-5893-43fd-b155-145d4c43c391 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-21361ca5-5893-43fd-b155-145d4c43c391');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d03c6371-5b49-44e2-afb4-f161624a8321\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d03c6371-5b49-44e2-afb4-f161624a8321')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d03c6371-5b49-44e2-afb4-f161624a8321 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_60990390-24cf-4e31-9e74-593b3320046b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_pivot')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_60990390-24cf-4e31-9e74-593b3320046b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_pivot');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_pivot",
              "summary": "{\n  \"name\": \"df_pivot\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4415851123820552,\n        \"min\": 0.3407821229050279,\n        \"max\": 0.9652777777777778,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3407821229050279,\n          0.9652777777777778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5236787725172798,\n        \"min\": 0.14619883040935672,\n        \"max\": 0.8867924528301887,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.14619883040935672,\n          0.8867924528301887\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23943408004680838,\n        \"min\": 0.15212981744421908,\n        \"max\": 0.49074074074074076,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.15212981744421908,\n          0.49074074074074076\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize']=(10,6)\n",
        "df.hist(bins=20, layout=(2,3))\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 529
        },
        "id": "t0u7TO0ZCsE1",
        "outputId": "3d8d5cc1-f254-4591-a0ed-c032163e01f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 6 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA90AAAJOCAYAAACqS2TfAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAsURJREFUeJzs3X1cU+X/P/DXYGOKCoQiug3ExExRLLwpU9NQQBS1W6nMFLWw0G6wDP2kYRrYjZBmqaWhaX5N/GRoIYJSpKWUYKmYYqYiQwNLmYiO3ZzfH/y2j3MgGzIY4/V8PPaoXec6O9d7Z1zuvXOd6xIJgiCAiIiIiIiIiBqcU1M3gIiIiIiIiMhRMekmIiIiIiIishEm3UREREREREQ2wqSbiIiIiIiIyEaYdBMRERERERHZCJNuIiIiIiIiIhth0k1ERERERERkI0y6qUFpNBqoVKp6719RUQG1Wt2ALSIian4qKiqQkZGBqqoqq/a7du0acnJyoNVqbdQyIiIqKSmBIAhN3QxqRph0U4P66quvEBgYWO/9R40ahffff7/e+1++fBlnz56t9/5ERE3lxi9wZ86cQXh4OP7991+rXuPHH39EWFgYNBqN1cefNWsW3nrrLZOyyspK3H333VAqlaisrERFRUWN+x45csSk/deuXUNFRUWtD35ZJaKmIggCBg0ahJycnHq/xl133YXy8nKz8l9++QWdOnVCdnb27TSRHJC4qRtAzZMgCNDpdGbler0eAGq9yiIWV3/kKisrjXVv3r+qqqrGL3ZisRitWrW6Zbs+/PBDJCUloaysDFKptM44AKC8vBznz5+/ZR03NzfIZDKLXk8QBOj1euh0Ouj1egiCgNatW1u0LxG1TCdPnsQDDzyAw4cPo3PnzvV+nT179mDYsGH16nOuXLli1m/q9XqcOHECGo0G06dPR+vWrbF27Vqz/R566CGMGDECX3zxBaRSKYYOHYq8vLxaj3X69Gn4+flZ3UYiotuVn5+PAwcOwN3dHRcvXrxlXYlEAnd3dwDA+fPnER0dje3btwMAFAoFAGDz5s2IiIgAAHzzzTcYMGAAli1bhuDgYBtGQc0Nk26ql/Xr1yMqKqrW7RKJpMbyS5cuwcPDA3fddReUSmWNdfbv349FixaZlY8fPx7ffPNNrce8fv06Vq1ahfHjx+PSpUsm27y8vODs7Fzjftu2bbtlLAAQGRmJzZs317gtPT0djzzyiEmSfSORSIRPPvkEM2bMuOUxiKjl+u677+Ds7Gx1wu3n51fj6B6RSFTrPs7OziY/jF68eBEdOnSo81hxcXEICgrC9OnTMWjQIGN5u3btsGvXLoSFheGpp55CamoqAODTTz/FpEmTTF7j6tWrFh2LiMhWUlJSAAD33ntvnXWHDRuGH374AQCgVqtx+PBh47bi4mJ4eHgYn+v1emzatAm7d+/GyJEj8csvv2DgwIEN2nZqvji8nOqtR48eEAQBgiBArVZj1KhR+O6774xlNz5Onz5ttv+OHTtqrFvT44033qizPQkJCfj777+xceNGdO7c2eQxbty4WvebMmVKncevLeEGgCFDhmD//v3Iz8/HkSNH8Mcff6CwsBB//fUXfv31V4jF4noN9SSiluPzzz/HkCFDUFxcjOLiYvz9998Aqq+sGMoMj8uXLxv3O3ToEMrKylBWVob09HS4urrizJkzxrKaHobXBoCPP/4Yjz/+uEVtDAwMxFNPPYWjR4+abevXrx++/fZbXL161djfSSQStGrVyuRh6QgkIiJbKC0txRdffIFvvvnG7HtmWFiY2fc/Q8JdVFSEU6dOQaPR4Pjx4xAEASdPnsTx48dx/PhxXLp0Cdu3b0enTp3g7++POXPmYNasWZxfg4x4pZtum16vx/Tp05GRkYGMjAyTbSKRCP/9739r/DWxuLj4lldjDNq3b4/p06ffss4ff/yB9957D2+99RZeeeUVk21PPvkkXFxc6g6kntzc3BAUFFTjtk8//RSurq51XkknopZr165dOHLkCI4cOYL//ve/Jttq6luio6OxatUqAMAdd9xhLN+yZQsmTJiALl26WHzscePG4ZVXXsFvv/1mLFMqlcYRO5WVlQCACxcuQCwWY/HixXB2dkZZWRm8vLyMdVxcXHD//fdj165dFh+biKixvf7667jrrrswfvx4q/aLiooy3gPeu3dvADAZ8fP+++9jzZo1iIuLAwA8//zz+Oijj7BgwQIkJCQ0UOupWROI6uHSpUtCYWGhcOXKFWHChAmCRCIRHn/8caGqqkoQBEG4fv26MH78eGHEiBGCWq0WqqqqhCNHjgg6nc64XavVCteuXROuXbsmzJgxQwgKCjI+v3DhgjBr1ixBqVQK169fFzQajfG1a2rLXXfdJQwePFjQarUm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hbX1HYVaL4JaZ3nS7SjvUUs934y77nqW4ERqRERERGR3Ll++jO7du+PLL7+EXq+HIAhYv3499u7di2effRYAEBERAS8vL8yfPx86nQ7l5eWYNWsWoqKi4OXl1cQREBFVY9JNRERERHbHw8MDX375JdavXw8fHx94eXlh1apVSE9PR8+ePQEAYrEYGRkZOHbsGHx8fBAQEIC+ffti2bJlTdx6IqL/4fByIiIiImpyZ86cMSu7//77kZmZecv9FAoF0tLSbNQqIqLbxyvdRERERERERDbCpJuIiIiIiIjIRph0ExEREREREdkIk24iIiIiIiIiG2HSTURERERERGQjTLqJiIiIiIiIbIRJNxEREREREZGNMOkmIiIiIiIishEm3UREREREREQ2wqSbiIiIiIiIyEasTrpPnz6N8ePHQy6Xo3PnzoiMjMT58+eN29VqNeLi4uDv7w+ZTIbx48ejpKTE5DWUSiUiIyPh5+cHuVyO2NhYVFVV3X40RERERERERHbEqqT78uXLeOihhzB27FgUFxfjr7/+gkQiwfLly411YmJikJubi7y8PBQVFaF79+4IDw+HTqcDAFRVVSEkJAS+vr44deoUCgoKkJ+fj9jY2IaNjIiIiIiIiKiJWZV0Jycno0+fPpg+fTpEIhFat26N9evXIzExEQBQVFSElJQULF26FO7u7hCLxUhISIBSqUR6ejoAIDU1FaWlpUhISICzszM8PDyQlJSENWvW4OLFiw0fIREREREREVETsSrp3r59O0aPHm1S5uzsbPz/nJwceHt7IygoyFjm4uKCsLAw7Ny5EwCQnZ2N0NBQSCQSY52goCB4enoiOzu7XkEQERERERER2SOxNZVPnjwJDw8PPPfcc9i9ezfatm2LyMhIxMXFQSwWQ6lUQiaTme0nk8lQWFgIoPp+7t69e5vVkcvlUCqVNR5XrVZDrVYbn6tUKgCARqOBRqOps92GOpbUdSSMu+XE7UgxS50Fy+s6Vde1Jm5HeI+IiIiIqPmwKunW6XRYvHgxPvnkE3z66acoLCzEY489hkuXLmHp0qWQSCRwcjK/eC4SiSAI1V+OLalzs8TERCxcuNCsPDMzE66urha3Pysry+K6joRxtxyOEPN7A63fx5q4KysrrT8AEREREVE9WZV0+/r64vnnn8ewYcMAAD169MD8+fMxc+ZMLF26FAqF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rI3bMFKmLg2WdCuVSshkMrNymUxm7AyVSqXJL5MGcrkcSqWy1td25GFAttTSh4VYc76b+3vkSOfamqFxhnNcn+FSRERk/4qKijB69GisWLECTzzxRI119Ho9nJxMpynS6XQQiWpOkKRSqVniDgASicSq5EKtF0GtszwJa4zExZr21PsYVsbtKBwh7vp8Bq39u3AUlsZt6XvTYEm3RCIx6/AAQCQSQRAEi+vUxJGHATWGljosxJrzzXNtP+ozNM6auC0dBkRERE1vxowZePHFF2tNuC9fvox+/frh7bffxlNPPQWRSIQvvvgCe/fuxbJlyxq5tURENWuwpFuhUJjNVA4AJSUlkMvlFtepiSMPA7Kllj4sxJrzzXNtP6wZGmcY8mVN3JYOAyIioqa3c+dO5OXl4bPPPjPbVlxcDA8PD3z55ZdYsGAB5syZA7Vaje7duyM9PR09e/ZsghY3nPosCUVE9qnBku7g4GCUlpbi8OHDxvtntFotsrOzsXLlSgBAWFgYoqOjodVqIRZXH7qgoABlZWUIDg6u9bUdeRhQY2ipw0KsOd+O8v44wrmuz9Ata+Ju7u8PEVFLcquRkAb3338/MjMzG6E1t4dJNDU1az6DUmehUSbmaymsWqf7Vry8vBAVFYXY2FioVCrodDrMmzcPnp6eGDOmeiH2iIgIeHl5Yf78+dDpdCgvL8esWbMQFRUFLy+vhmoKERERERERkV1osCvdALB8+XLExcWhV69e0Ol0GDhwIDIyMoxXtcViMTIyMhATEwMfHx84OTnhiSeewJIlSxqyGURERERERHSbesfvsngU4pklY2zcmuar3kn3mTNnzMqkUimSk5ORnJxc634KhQJpaWn1PSwRERERERFRs9Fgw8uJiIiIiIiIyBSTbiIiIiIiIiIbYdJNREREREREZCNMuomIiIiIiIhshEk3ERERERERkY0w6SYiIiIiIiKyESbdRERERERERDbCpJuIiIiIiIjIRph0ExEREREREdkIk24iIiIiIiIiG2HSTURERERERGQjTLqJiIiIiIiIbIRJNxEREREREZGNMOkmIiIiIiIishEm3UREREREREQ2wqSbiIiIiIiIyEaYdBMRERERERHZCJNuIiIiIiIiIhth0k1ERERERERkI+KmbgARERERERE1b35x39n8GGeWjLH5MWyBV7qJiIiIiIiI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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize']=(4,4)\n",
        "\n",
        "df['運賃'].hist(bins=60)\n",
        "plt.xlim(0,150)\n",
        "plt.title('運賃詳細分布')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "id": "bof9-1epHP-9",
        "outputId": "f3fd79d5-71ea-4956-8524-7b1d3cb7efc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize']=(8,4)\n",
        "df2=df[['性別','乗船港']]\n",
        "for i,c in enumerate(df2.columns):\n",
        "  ax=plt.subplot(1,2,i+1)\n",
        "  df2[c].value_counts().plot(\n",
        "      kind='bar',title=c,ax=ax  )\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "id": "gI5kejexJFop",
        "outputId": "a6a3e734-0b2f-41de-95b6-1c887aeabf6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize']=(6,6)\n",
        "sns.boxplot(\n",
        "    x='客室クラス',y='運賃',data=df,\n",
        "    palette=['blue','cyan','gray'])\n",
        "plt.title('客室クラスと運賃の関係')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 672
        },
        "id": "4KZ0vQQEJ03m",
        "outputId": "daec51fa-f33f-4fd5-f97e-76f5dcb51c5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-26-bca8843bb9b9>:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize']=(6,6)\n",
        "sns.boxplot(\n",
        "    x='客室クラス',y='運賃',data=df,\n",
        "    palette=['blue','cyan','gray'])\n",
        "plt.ylim(0,120)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        },
        "id": "7cQrFNExL3WW",
        "outputId": "ff3c2bf8-b3b7-4e6e-a4af-f8ed2886f920"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-27-a7be293a9c5c>:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.boxplot(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pivot=df.pivot_table(\n",
        "    index='性別',columns='客室クラス',\n",
        "    values='生存状況',aggfunc='mean'\n",
        ")\n",
        "plt.rcParams['figure.figsize']=(4,4)\n",
        "sns.heatmap(\n",
        "    df_pivot,square=True,annot=True,\n",
        "    fmt='.03f',cmap='Blues',cbar=False)\n",
        "xlabel=df_pivot.columns.name\n",
        "ylabel=df_pivot.index.name\n",
        "plt.title(xlabel+'vs'+ylabel)\n",
        "plt.xlabel(xlabel)\n",
        "plt.ylabel(ylabel)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "id": "GsXgLMWpNP0a",
        "outputId": "b450556b-5d80-4e26-b12a-6db8503d6aec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize']=(4,4)\n",
        "df.groupby('性別')['生存状況'].mean().plot(kind='bar')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "siasJ6NoF3R0",
        "outputId": "7a3e90d5-9c76-4557-e68c-a9380b42703a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize']=(8,4)\n",
        "sns.histplot(\n",
        "    data=df, x='年齢',hue='生存状況',\n",
        "    palette=['blue','cyan'],multiple='dodge',\n",
        "    shrink=0.7\n",
        ")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        },
        "id": "eLvL_UMBGWlN",
        "outputId": "3baf2279-d32a-4687-cec6-fe6529d1cd2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize']=(4,4)\n",
        "df.groupby('客室クラス')['生存状況'].mean().plot(kind='bar')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "qFyJ5SRhG1ej",
        "outputId": "d258dce0-40ac-4ff7-aea2-c52fcba858a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams['figure.figsize']=(4,4)\n",
        "df.groupby('乗船港')['生存状況'].mean().plot(kind='bar')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "tJjSzd2wHR2G",
        "outputId": "f7f2561e-6176-4255-9f7d-579b16d22178"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_crosstab=pd.crosstab(\n",
        "    index=df['客室クラス'],columns=df['乗船港'],\n",
        "    normalize='columns'\n",
        ")\n",
        "plt.rcParams['figure.figsize']=(4,4)\n",
        "sns.heatmap(\n",
        "    df_crosstab,square=True,annot=True,\n",
        "    fmt='.03f',cmap='Blues',cbar=False\n",
        ")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "X1m-4n2xHXo0",
        "outputId": "1b05d88d-3a4d-4071-af8f-787504baf216"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x400 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['救命ボート']=df['救命ボート番号'].notnull()\n",
        "display(df[['救命ボート番号','救命ボート']].head(3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "rosUoqjeLpsz",
        "outputId": "d694c7dc-2835-40c7-bccb-a84ba0fbfd11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  救命ボート番号  救命ボート\n",
              "0       2   True\n",
              "1      11   True\n",
              "2     NaN  False"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2073878d-cf62-45f6-9937-5e7fb7f82cd6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>救命ボート番号</th>\n",
              "      <th>救命ボート</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2073878d-cf62-45f6-9937-5e7fb7f82cd6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2073878d-cf62-45f6-9937-5e7fb7f82cd6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2073878d-cf62-45f6-9937-5e7fb7f82cd6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9aeb438a-6624-4b14-a541-441d6f5481f4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9aeb438a-6624-4b14-a541-441d6f5481f4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9aeb438a-6624-4b14-a541-441d6f5481f4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df[['\\u6551\\u547d\\u30dc\\u30fc\\u30c8\\u756a\\u53f7','\\u6551\\u547d\\u30dc\\u30fc\\u30c8']]\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"\\u6551\\u547d\\u30dc\\u30fc\\u30c8\\u756a\\u53f7\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"11\",\n          \"2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6551\\u547d\\u30dc\\u30fc\\u30c8\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_crosstab=pd.crosstab(\n",
        "    index=df['生存状況'],\n",
        "    columns=df['救命ボート']\n",
        ")\n",
        "display(df_crosstab)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "2i6oRdWfME2T",
        "outputId": "d1d793b6-e6ac-4cdc-ac84-62cfaf9dbd62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "救命ボート  False  True \n",
              "生存状況               \n",
              "0        800      9\n",
              "1         23    477"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bcbc2cc6-59fc-4cc4-abfe-2735c16e5d30\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>救命ボート</th>\n",
              "      <th>False</th>\n",
              "      <th>True</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>生存状況</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>800</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>23</td>\n",
              "      <td>477</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bcbc2cc6-59fc-4cc4-abfe-2735c16e5d30')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bcbc2cc6-59fc-4cc4-abfe-2735c16e5d30 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bcbc2cc6-59fc-4cc4-abfe-2735c16e5d30');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-36bcb60b-b253-4869-a0eb-39481fcba501\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36bcb60b-b253-4869-a0eb-39481fcba501')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-36bcb60b-b253-4869-a0eb-39481fcba501 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ecdaf810-5f5d-4bf6-85b0-9204eff9cf3a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_crosstab')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ecdaf810-5f5d-4bf6-85b0-9204eff9cf3a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_crosstab');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_crosstab",
              "summary": "{\n  \"name\": \"df_crosstab\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"\\u751f\\u5b58\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": false,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 549,\n        \"min\": 23,\n        \"max\": 800,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          23,\n          800\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": true,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330,\n        \"min\": 9,\n        \"max\": 477,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          477,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x1=df.query(\n",
        "    ' 生存状況 == 1 and 救命ボート == False'\n",
        ")\n",
        "display(x1[[\n",
        "    '客室クラス','生存状況','氏名','性別','年齢','救命ボート番号'\n",
        "]].head(3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "TbUCFkVDNEtM",
        "outputId": "3777a2fe-28bb-425d-8dfb-480b4d149aae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     客室クラス  生存状況                        氏名      性別    年齢 救命ボート番号\n",
              "192      1     1      Lurette, Miss. Elise  female  58.0     NaN\n",
              "358      2     1  Bystrom, Mrs. (Karolina)  female  42.0     NaN\n",
              "395      2     1       Doling, Miss. Elsie  female  18.0     NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-90319d22-58f4-49b7-a22b-552940bcb39e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>客室クラス</th>\n",
              "      <th>生存状況</th>\n",
              "      <th>氏名</th>\n",
              "      <th>性別</th>\n",
              "      <th>年齢</th>\n",
              "      <th>救命ボート番号</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>192</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Lurette, Miss. Elise</td>\n",
              "      <td>female</td>\n",
              "      <td>58.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>358</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Bystrom, Mrs. (Karolina)</td>\n",
              "      <td>female</td>\n",
              "      <td>42.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Doling, Miss. Elsie</td>\n",
              "      <td>female</td>\n",
              "      <td>18.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90319d22-58f4-49b7-a22b-552940bcb39e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-90319d22-58f4-49b7-a22b-552940bcb39e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-90319d22-58f4-49b7-a22b-552940bcb39e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9e574ca6-60fe-4d06-b988-4d2de512e168\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e574ca6-60fe-4d06-b988-4d2de512e168')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9e574ca6-60fe-4d06-b988-4d2de512e168 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(x1['性別'].value_counts())\n",
        "print()\n",
        "\n",
        "x11=df.query('救命ボート==False')\n",
        "print(x11.groupby('性別')['生存状況'].mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9sXfRKaXNoAK",
        "outputId": "58bdb071-c759-41d4-e513-f5670a50cb85"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "性別\n",
            "female    21\n",
            "male       2\n",
            "Name: count, dtype: int64\n",
            "\n",
            "性別\n",
            "female    0.142857\n",
            "male      0.002959\n",
            "Name: 生存状況, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x2=df.query(\n",
        "    ' 生存状況 == 0 and 救命ボート == True'\n",
        ")\n",
        "display(x2[[\n",
        "    '客室クラス','生存状況','氏名','性別','年齢','救命ボート番号'\n",
        "]].head(3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "P0EGQ2pHOqSW",
        "outputId": "a8c47d0f-8456-4aea-835b-ead2bd1d4084"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     客室クラス  生存状況                        氏名    性別    年齢 救命ボート番号\n",
              "19       1     0      Beattie, Mr. Thomson  male  36.0       A\n",
              "166      1     0  Hoyt, Mr. William Fisher  male   NaN      14\n",
              "544      2     0   Renouf, Mr. Peter Henry  male  34.0      12"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7f0f7278-7cfb-4889-8986-7c86bf3bca48\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>客室クラス</th>\n",
              "      <th>生存状況</th>\n",
              "      <th>氏名</th>\n",
              "      <th>性別</th>\n",
              "      <th>年齢</th>\n",
              "      <th>救命ボート番号</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Beattie, Mr. Thomson</td>\n",
              "      <td>male</td>\n",
              "      <td>36.0</td>\n",
              "      <td>A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>166</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Hoyt, Mr. William Fisher</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>544</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>Renouf, Mr. Peter Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>34.0</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f0f7278-7cfb-4889-8986-7c86bf3bca48')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7f0f7278-7cfb-4889-8986-7c86bf3bca48 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7f0f7278-7cfb-4889-8986-7c86bf3bca48');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d6a4197a-1b29-469a-976b-32607130b412\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d6a4197a-1b29-469a-976b-32607130b412')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d6a4197a-1b29-469a-976b-32607130b412 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"]]\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"\\u5ba2\\u5ba4\\u30af\\u30e9\\u30b9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u751f\\u5b58\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6c0f\\u540d\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Beattie, Mr. Thomson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6027\\u5225\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4142135623730951,\n        \"min\": 34.0,\n        \"max\": 36.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          34.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6551\\u547d\\u30dc\\u30fc\\u30c8\\u756a\\u53f7\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(x2['性別'].value_counts())\n",
        "print()\n",
        "x22=df.query(' 救命ボート == True')\n",
        "print(1-x22.groupby('性別')['生存状況'].mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Za8KXPu_Pb4v",
        "outputId": "15e59ad2-ff6a-4aca-8b73-8a787b3a98df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "性別\n",
            "male      8\n",
            "female    1\n",
            "Name: count, dtype: int64\n",
            "\n",
            "性別\n",
            "female    0.003135\n",
            "male      0.047904\n",
            "Name: 生存状況, dtype: float64\n"
          ]
        }
      ]
    }
  ]
}